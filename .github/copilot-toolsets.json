{
  "$schema": "https://aka.ms/copilot/toolsets-schema",
  "toolsets": {
    "modern-reservation-dev": {
      "description": "Development tools and commands for Modern Reservation project",
      "icon": "tools",
      "tools": [
        "ripgrep",
        "fd-find",
        "gh-cli",
        "biome",
        "docker",
        "postgresql",
        "redis",
        "kafka",
        "maven",
        "npm"
      ],
      "instructions": [
        "Always use ripgrep (rg) instead of grep for searching",
        "Use Biome.js for code formatting and linting, not ESLint or Prettier",
        "Use ./dev.sh script for all service operations",
        "Use UPPERCASE enum values to match PostgreSQL",
        "Use file: protocol for monorepo dependencies",
        "Use shared schemas from @modern-reservation/schemas",
        "Use shared GraphQL client from @modern-reservation/graphql-client"
      ]
    },
    "code-search": {
      "description": "Fast code searching with ripgrep and fd",
      "icon": "search",
      "tools": ["ripgrep", "fd-find"],
      "instructions": [
        "Use 'rg' instead of 'grep' for searching file contents",
        "Use 'fd' instead of 'find' for finding files and directories",
        "Use 'rg --type-list' to see available file types",
        "Use 'rg -t ts' for TypeScript files",
        "Use 'rg -t java' for Java files",
        "Use 'rg -g \"*.json\"' for JSON files",
        "Use 'rg -i' for case-insensitive search",
        "Use 'rg -l' to list only filenames",
        "Use 'rg --context 3' to show 3 lines before/after match",
        "Use 'fd pattern' to find files by name",
        "Use 'fd -e ts' to find TypeScript files",
        "Use 'fd -t d' to find directories only",
        "Use 'fd -H' to include hidden files"
      ]
    },
    "code-quality": {
      "description": "Code formatting and linting with Biome.js",
      "icon": "sparkle",
      "tools": ["biome"],
      "instructions": [
        "Use 'npx biome check .' to check code quality",
        "Use 'npx biome check --write .' to auto-fix issues",
        "Use './dev.sh biome-check' to check all projects",
        "Use './dev.sh biome-fix' to fix all projects",
        "Never suggest ESLint or Prettier",
        "Code style: single quotes, 2-space indent, 100 char line width",
        "Always include semicolons and ES5 trailing commas"
      ]
    },
    "service-management": {
      "description": "Service lifecycle management using dev.sh",
      "icon": "rocket",
      "tools": ["dev.sh"],
      "instructions": [
        "Always use './dev.sh' script for service operations",
        "Use './dev.sh start' to start all services",
        "Use './dev.sh stop' to stop all services",
        "Use './dev.sh status' to check status",
        "Use './dev.sh clean' for clean restart",
        "Use './dev.sh docker-start' for infrastructure",
        "Use './dev.sh logs <service>' to view logs",
        "Never suggest running docker-compose or mvn directly"
      ]
    },
    "database-operations": {
      "description": "PostgreSQL database operations",
      "icon": "database",
      "tools": ["postgresql", "psql"],
      "instructions": [
        "Use 'psql -h localhost -U modernreservation -d modernreservation' to connect",
        "Use './scripts/setup-database.sh' to initialize schema",
        "Use './scripts/backup-database.sh' to backup",
        "All enum values must be UPPERCASE to match database",
        "Use snake_case for database column names",
        "Use camelCase in TypeScript/JavaScript code"
      ]
    },
    "monorepo": {
      "description": "Monorepo workspace management",
      "icon": "package",
      "tools": ["npm", "nx"],
      "instructions": [
        "Use 'file:' protocol for local package dependencies",
        "Never use 'npm link' or 'workspace:*'",
        "Example: '@modern-reservation/schemas': 'file:../../../libs/shared/schemas'",
        "Run 'npm install' at root to sync all packages",
        "Use shared packages: schemas, graphql-client, ui-components",
        "Never create duplicate schemas or GraphQL clients"
      ]
    },
    "graphql": {
      "description": "GraphQL operations and Apollo client",
      "icon": "graph",
      "tools": ["apollo"],
      "instructions": [
        "Use '@modern-reservation/graphql-client' for all GraphQL operations",
        "Never create separate Apollo clients",
        "Import hooks: useGetPropertiesQuery, useCreateReservationMutation, etc.",
        "GraphQL endpoint: http://localhost:8080/graphql",
        "Use Apollo DevTools for debugging"
      ]
    },
    "docker": {
      "description": "Docker and container management",
      "icon": "container",
      "tools": ["docker", "docker-compose"],
      "instructions": [
        "Use './dev.sh docker-start' to start infrastructure",
        "Use 'docker-compose -f infrastructure/docker/docker-compose-infrastructure.yml' if needed",
        "PostgreSQL: localhost:5432",
        "Redis: localhost:6379",
        "Kafka: localhost:9092",
        "pgAdmin: localhost:5050",
        "Use 'docker ps' to check running containers",
        "Use 'docker logs <container>' to view logs"
      ]
    },
    "java-spring": {
      "description": "Java Spring Boot services",
      "icon": "coffee",
      "tools": ["maven", "java"],
      "instructions": [
        "Use Java 21 LTS",
        "Use Maven for builds: 'mvn clean install'",
        "Services in: apps/backend/java-services/",
        "Use './dev.sh start' to run services",
        "Follow SOLID principles strictly",
        "Use @Service, @Repository, @Controller annotations",
        "Use application.yml for configuration"
      ]
    },
    "nodejs-typescript": {
      "description": "Node.js TypeScript services",
      "icon": "file-code",
      "tools": ["node", "npm", "typescript"],
      "instructions": [
        "Use Node.js 20 LTS",
        "Use TypeScript 5.2+",
        "Services: api-gateway, notification-service, websocket-service",
        "Use 'npm run dev' for development",
        "Use Biome.js for formatting (not ESLint/Prettier)",
        "Import shared packages with file: protocol",
        "Single quotes, semicolons always"
      ]
    },
    "frontend-nextjs": {
      "description": "Next.js frontend development",
      "icon": "browser",
      "tools": ["nextjs", "tailwindcss"],
      "instructions": [
        "Use Next.js 15+ (without Turbopack)",
        "Use Tailwind CSS v4 for styling",
        "Guest portal: apps/frontend/guest-portal",
        "Use 'npm run dev' to start",
        "Port: 3000",
        "Use shared UI components from @modern-reservation/ui-components",
        "Use GraphQL client from @modern-reservation/graphql-client"
      ]
    },
    "github-operations": {
      "description": "GitHub CLI operations for Modern Reservation project",
      "icon": "github",
      "tools": ["gh-cli"],
      "instructions": [
        "Installation: sudo apt install gh",
        "Authenticate: gh auth login",
        "Use 'gh' instead of web UI for faster GitHub operations",
        "Pull Requests:",
        "  gh pr list - List PRs",
        "  gh pr create --title 'feat: Title' --body 'Description' - Create PR",
        "  gh pr view 123 - View PR details",
        "  gh pr checks - Check CI status",
        "  gh pr diff - View PR diff",
        "  gh pr review 123 --approve - Approve PR",
        "  gh pr merge 123 --squash - Merge PR (always squash)",
        "Issues:",
        "  gh issue list - List issues",
        "  gh issue create --title 'Bug: Title' - Create issue",
        "  gh issue view 123 - View issue",
        "  gh issue close 123 - Close issue",
        "Workflows:",
        "  gh run list - List workflow runs",
        "  gh run list --workflow=build-java-services.yml - Filter by workflow",
        "  gh run view <run-id> - View run details",
        "  gh run rerun <run-id> - Rerun workflow",
        "Repository:",
        "  gh repo view - View repo info",
        "  gh browse - Open repo in browser",
        "Releases:",
        "  gh release list - List releases",
        "  gh release create v1.0.0 --notes 'Notes' - Create release",
        "Best practices:",
        "  - Always use --squash when merging to keep history clean",
        "  - Check PR status before merging: gh pr checks",
        "  - Follow conventional commit format in PR titles"
      ]
    }
  }
}
