name: Generate and Deploy Business Services Documentation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/backend/java-services/business-services/**'
      - 'docs/api/business-services/**'
      - '.github/workflows/docs-business-services.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/backend/java-services/business-services/**'
      - 'docs/api/business-services/**'
  workflow_dispatch:
    inputs:
      deploy_to_pages:
        description: 'Deploy to GitHub Pages'
        required: false
        default: 'true'
        type: boolean

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      services-changed: ${{ steps.changes.outputs.services }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üìã Detect changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^apps/backend/java-services/business-services/'; then
            echo "services=true" >> $GITHUB_OUTPUT
          else
            echo "services=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD~1 HEAD | grep -E '^docs/api/business-services/'; then
            echo "docs=true" >> $GITHUB_OUTPUT
          else
            echo "docs=false" >> $GITHUB_OUTPUT
          fi

      - name: üöÄ Check deployment conditions
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.deploy_to_pages }}" == "true" ]] || \
             [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  generate-javadoc:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.services-changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'analytics-engine',
          'availability-calculator',
          'payment-processor',
          'rate-management',
          'reservation-engine'
        ]
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: üîß Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: üìñ Generate Javadoc for ${{ matrix.service }}
        run: |
          cd apps/backend/java-services/business-services/${{ matrix.service }}
          
          echo "üîç Checking Java source files for ${{ matrix.service }}..."
          
          # Check if service has Java source files
          if [ -d "src/main/java" ] && [ "$(find src/main/java -name '*.java' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "üìö Found Java source files. Generating Javadoc for ${{ matrix.service }}..."
            
            # Ensure we can compile first
            mvn clean compile -q -DskipTests=true || {
              echo "‚ö†Ô∏è Compilation failed for ${{ matrix.service }}, creating placeholder..."
              mkdir -p target/site/apidocs
              cat > target/site/apidocs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>${{ matrix.service }} API Documentation</title>
              <style>
                  body { font-family: Arial, sans-serif; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .placeholder { text-align: center; color: #666; }
                  .service-name { color: #333; margin-bottom: 20px; }
                  .message { font-size: 18px; margin-bottom: 30px; }
                  .back-link { color: #0066cc; text-decoration: none; }
                  .back-link:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="placeholder">
                      <h1 class="service-name">${{ matrix.service }} Service</h1>
                      <p class="message">‚ö†Ô∏è Java source compilation failed. API documentation will be generated when source code is ready.</p>
                      <p><a href="../../" class="back-link">‚Üê Back to Business Services Documentation</a></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
              exit 0
            }

            # Generate Javadoc with custom styling
            mvn javadoc:javadoc \
              -Dshow=private \
              -Dnohelp \
              -Dwindowtitle="${{ matrix.service }} API Documentation" \
              -Ddoctitle="${{ matrix.service }} API Documentation" \
              -Dbottom="Generated for Modern Reservation System" \
              -Dadditionalparam="-Xdoclint:none" \
              -Dmaven.javadoc.failOnError=false || {
                echo "‚ö†Ô∏è Javadoc generation failed for ${{ matrix.service }}, creating placeholder..."
                mkdir -p target/site/apidocs
                cat > target/site/apidocs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>${{ matrix.service }} API Documentation</title>
              <style>
                  body { font-family: Arial, sans-serif; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .placeholder { text-align: center; color: #666; }
                  .service-name { color: #333; margin-bottom: 20px; }
                  .message { font-size: 18px; margin-bottom: 30px; }
                  .back-link { color: #0066cc; text-decoration: none; }
                  .back-link:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="placeholder">
                      <h1 class="service-name">${{ matrix.service }} Service</h1>
                      <p class="message">‚ö†Ô∏è Javadoc generation failed. API documentation will be available when Java source code is completed.</p>
                      <p><a href="../../" class="back-link">‚Üê Back to Business Services Documentation</a></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
              }
          else
            echo "‚ö†Ô∏è No Java source files found for ${{ matrix.service }}, creating placeholder..."
            mkdir -p target/site/apidocs
            cat > target/site/apidocs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>${{ matrix.service }} API Documentation</title>
              <style>
                  body { font-family: Arial, sans-serif; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .placeholder { text-align: center; color: #666; }
                  .service-name { color: #333; margin-bottom: 20px; }
                  .message { font-size: 18px; margin-bottom: 30px; }
                  .back-link { color: #0066cc; text-decoration: none; }
                  .back-link:hover { text-decoration: underline; }
                  .status { background: #e3f2fd; padding: 15px; border-radius: 4px; margin: 20px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="placeholder">
                      <h1 class="service-name">${{ matrix.service }} Service</h1>
                      <p class="message">üöß Service in Development</p>
                      <div class="status">
                          <p><strong>Status:</strong> API documentation will be generated when Java source files are added to this service.</p>
                          <p><strong>Expected:</strong> Spring Boot REST controllers with proper JavaDoc annotations</p>
                      </div>
                      <p><a href="../../" class="back-link">‚Üê Back to Business Services Documentation</a></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          fi
          
          echo "‚úÖ Javadoc processing completed for ${{ matrix.service }}"

      - name: üì¶ Upload Javadoc artifacts
        uses: actions/upload-artifact@v4
        with:
          name: javadoc-${{ matrix.service }}
          path: apps/backend/java-services/business-services/${{ matrix.service }}/target/site/apidocs/
          retention-days: 30

  build-documentation-site:
    needs: [analyze-changes, generate-javadoc]
    if: always() && (needs.analyze-changes.outputs.services-changed == 'true' || needs.analyze-changes.outputs.docs-changed == 'true' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Download all Javadoc artifacts
        if: needs.generate-javadoc.result == 'success'
        uses: actions/download-artifact@v4
        with:
          path: ./javadoc-artifacts

      - name: üèóÔ∏è Prepare documentation structure
        run: |
          echo "üèóÔ∏è Setting up documentation structure..."

          # Create API docs directory structure
          mkdir -p docs/api/business-services/javadoc

          # Copy Javadoc artifacts if they exist
          if [ -d "./javadoc-artifacts" ]; then
            for service in analytics-engine availability-calculator payment-processor rate-management reservation-engine; do
              if [ -d "./javadoc-artifacts/javadoc-$service" ]; then
                echo "üìö Copying Javadoc for $service..."
                cp -r "./javadoc-artifacts/javadoc-$service" "docs/api/business-services/javadoc/$service"
              fi
            done
          fi

      - name: üìù Generate API index page
        run: |
          cat > docs/api/index.md << 'EOF'
          # Modern Reservation System API Documentation

          Welcome to the comprehensive API documentation for the Modern Reservation System.

          ## üèóÔ∏è Architecture

          Our system follows a **microservices architecture** with:
          - **Hybrid Technology Stack**: Node.js + Java services
          - **Event-Driven Communication**: Apache Kafka
          - **Service Discovery**: Eureka Server
          - **API Gateway**: GraphQL Federation + REST

          ## üìã Service Categories

          ### üè¢ Business Services (Java Spring Boot)
          Core business logic and domain services:
          - [**Business Services Overview**](./business-services/) - Complete business services documentation
          - [**Analytics Engine**](./business-services/analytics-engine/) - Real-time analytics and reporting
          - [**Availability Calculator**](./business-services/availability-calculator/) - Room availability computation
          - [**Payment Processor**](./business-services/payment-processor/) - Secure payment handling
          - [**Rate Management**](./business-services/rate-management/) - Dynamic pricing engine
          - [**Reservation Engine**](./business-services/reservation-engine/) - Core booking logic

          ### üåê API Services (Node.js)
          High-performance I/O services:
          - **GraphQL Gateway** - Unified data graph and federation
          - **WebSocket Service** - Real-time communication
          - **Notification Service** - Multi-channel messaging

          ### üèóÔ∏è Infrastructure Services
          Platform and infrastructure:
          - **Eureka Server** - Service discovery and registration
          - **Config Server** - Centralized configuration management

          ## üöÄ Getting Started

          ### Quick Start
          ```bash
          # Start all infrastructure
          ./dev.sh docker-start

          # Start business services
          ./dev.sh start-business-services

          # Check service health
          ./dev.sh status
          ```

          ### Service URLs
          | Service | URL | Health Check |
          |---------|-----|--------------|
          | Eureka Dashboard | http://localhost:8761 | ‚úÖ Active |
          | GraphQL Playground | http://localhost:4000/graphql | ‚úÖ Active |
          | API Gateway | http://localhost:3001 | ‚úÖ Active |

          ## üìä Observability

          ### Monitoring Stack
          - **Jaeger Tracing**: http://localhost:16686
          - **Prometheus Metrics**: http://localhost:9090
          - **Grafana Dashboards**: http://localhost:3000 (admin/admin123)

          ### OpenTelemetry
          All services include distributed tracing with automatic instrumentation.

          ## üîê Authentication

          ### JWT Authentication
          ```bash
          # Get JWT token
          curl -X POST http://localhost:3001/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username": "admin", "password": "admin123"}'

          # Use token in requests
          curl -H "Authorization: Bearer <jwt-token>" \
               -H "X-Tenant-ID: <tenant-id>" \
               http://localhost:8080/api/v1/analytics/overview
          ```

          ## üì° GraphQL Federation

          ### Unified Schema
          Access all services through a single GraphQL endpoint:
          ```graphql
          query GetReservationWithAnalytics($id: ID!) {
            reservation(id: $id) {
              id
              guestName
              checkIn
              checkOut
              status
              analytics {
                revenue
                nights
                averageRate
              }
            }
          }
          ```

          ## üîó Event-Driven Architecture

          ### Kafka Topics
          | Topic | Purpose | Schema |
          |-------|---------|--------|
          | `reservation.created` | New reservations | [Avro Schema](../references/AVRO_QUICK_REFERENCE.md) |
          | `payment.processed` | Payment confirmations | [Avro Schema](../references/AVRO_QUICK_REFERENCE.md) |
          | `availability.updated` | Room availability changes | [Avro Schema](../references/AVRO_QUICK_REFERENCE.md) |

          ## üìö Additional Resources

          - [**Architecture Documentation**](../architecture/)
          - [**Deployment Guide**](../deployment/)
          - [**Multi-Tenancy Implementation**](../MULTI_TENANCY.md)
          - [**Development Guide**](../guides/DEV_QUICK_REFERENCE.md)

          ---

          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Version**: $(git rev-parse --short HEAD)
          EOF

      - name: üåê Generate navigation and Jekyll config
        run: |
          # Update Jekyll config for API docs
          cat >> docs/_config.yml << 'EOF'

          # API Documentation Configuration
          api_docs:
            base_path: "/api"
            services:
              - name: "Business Services"
                path: "/api/business-services"
                description: "Java Spring Boot microservices"
              - name: "GraphQL API"
                path: "/api/graphql"
                description: "Unified GraphQL endpoint"

          # Navigation
          navigation:
            - title: "Home"
              url: "/"
            - title: "API Documentation"
              url: "/api/"
              children:
                - title: "Business Services"
                  url: "/api/business-services/"
                - title: "Javadoc References"
                  url: "/api/business-services/javadoc/"
            - title: "Architecture"
              url: "/architecture/"
            - title: "Deployment"
              url: "/deployment/"

          # Plugins for enhanced functionality
          plugins:
            - jekyll-toc
            - jekyll-sitemap
            - jekyll-feed
          EOF

      - name: üì¶ Create documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: docs/
          retention-days: 30

  deploy-to-pages:
    needs: [analyze-changes, build-documentation-site]
    if: needs.analyze-changes.outputs.should-deploy == 'true' && (needs.build-documentation-site.result == 'success' || needs.build-documentation-site.result == 'skipped')
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download documentation artifact
        if: needs.build-documentation-site.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: docs/

      - name: üèóÔ∏è Setup Pages
        uses: actions/configure-pages@v4

      - name: üéØ Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      - name: üì§ Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3

      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify-completion:
    needs: [analyze-changes, generate-javadoc, build-documentation-site, deploy-to-pages]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: üìä Documentation Build Summary
        run: |
          echo "## üìö Business Services Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Changes Analysis** | ${{ needs.analyze-changes.result }} | Services: ${{ needs.analyze-changes.outputs.services-changed }}, Docs: ${{ needs.analyze-changes.outputs.docs-changed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Javadoc Generation** | ${{ needs.generate-javadoc.result }} | Java API documentation |" >> $GITHUB_STEP_SUMMARY
          echo "| **Site Build** | ${{ needs.build-documentation-site.result }} | Documentation site compilation |" >> $GITHUB_STEP_SUMMARY
          echo "| **Pages Deployment** | ${{ needs.deploy-to-pages.result }} | GitHub Pages deployment |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-to-pages.result }}" == "success" ]]; then
            echo "üéâ **Documentation successfully deployed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìñ **Access your documentation at**: https://red2n.github.io/modern-reservation/api/business-services/" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
