import { PortRegistry } from './port-registry';
import { ServiceCategory } from './types';

export class ConfigGenerator {
  /**
   * Generate Spring Boot application.yml configuration
   */
  static generateSpringBootConfig(serviceName: string): string {
    const service = PortRegistry.getServiceByName(serviceName);
    if (!service) {
      throw new Error(`Service not found: ${serviceName}`);
    }

    const configServer = PortRegistry.getServiceByName('config-server');
    const eurekaServer = PortRegistry.getServiceByName('eureka-server');
    const postgres = PortRegistry.getServiceByName('postgres');
    const kafka = PortRegistry.getServiceByName('kafka');
    const redis = PortRegistry.getServiceByName('redis');

    return `# Generated by @modern-reservation/port-manager
# DO NOT EDIT MANUALLY - Run: ./dev.sh config-generate

server:
  port: ${service.port}
  address: ${service.internal ? '127.0.0.1' : '0.0.0.0'}  # ${service.internal ? 'Internal only' : 'External access'}
  servlet:
    context-path: /${serviceName}

spring:
  application:
    name: ${serviceName}
  config:
    import:
      - "configserver:\${CONFIG_SERVER_URL:http://localhost:${configServer?.port || 8888}}"
  cloud:
    config:
      fail-fast: false
  profiles:
    active: \${SPRING_PROFILES_ACTIVE:dev}

  # Database Configuration
  datasource:
    url: \${DB_URL:jdbc:postgresql://localhost:${postgres?.port || 5432}/modern_reservation_dev}
    username: \${DB_USERNAME:postgres}
    password: \${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  # Kafka Configuration
  kafka:
    bootstrap-servers: \${KAFKA_BOOTSTRAP_SERVERS:localhost:${kafka?.port || 9092}}

  # Redis Configuration
  data:
    redis:
      host: \${REDIS_HOST:localhost}
      port: \${REDIS_PORT:${redis?.port || 6379}}

# Eureka Client Configuration
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:${eurekaServer?.port || 8761}/eureka/
    enabled: true
  instance:
    prefer-ip-address: true
    hostname: localhost

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
`;
  }

  /**
   * Generate Node.js .env configuration
   */
  static generateNodeEnvConfig(serviceName: string): string {
    const service = PortRegistry.getServiceByName(serviceName);
    if (!service) {
      throw new Error(`Service not found: ${serviceName}`);
    }

    const configServer = PortRegistry.getServiceByName('config-server');
    const eurekaServer = PortRegistry.getServiceByName('eureka-server');
    const postgres = PortRegistry.getServiceByName('postgres');
    const kafka = PortRegistry.getServiceByName('kafka');
    const redis = PortRegistry.getServiceByName('redis');
    const gateway = PortRegistry.getServiceByName('gateway-service');

    return `# Generated by @modern-reservation/port-manager
# DO NOT EDIT MANUALLY - Run: ./dev.sh config-generate

# Service Configuration
NODE_ENV=development
SERVICE_NAME=${serviceName}
PORT=${service.port}
HOST=${service.internal ? '127.0.0.1' : '0.0.0.0'}

# Security
JWT_SECRET=\${JWT_SECRET:-your-secret-key-change-in-production}
JWT_EXPIRES_IN=24h

# Service Discovery
EUREKA_HOST=localhost
EUREKA_PORT=${eurekaServer?.port || 8761}
EUREKA_ENABLED=true

# Database
DB_HOST=localhost
DB_PORT=${postgres?.port || 5432}
DB_NAME=modern_reservation_dev
DB_USER=postgres
DB_PASSWORD=postgres

# Redis
REDIS_HOST=localhost
REDIS_PORT=${redis?.port || 6379}

# Kafka
KAFKA_BROKERS=localhost:${kafka?.port || 9092}

# Config Server
CONFIG_SERVER_URL=http://localhost:${configServer?.port || 8888}

# Gateway
GATEWAY_URL=http://localhost:${gateway?.port || 8080}

# CORS
CORS_ORIGIN=http://localhost:3000,http://localhost:3001,http://localhost:${gateway?.port || 8080}

# Logging
LOG_LEVEL=info
`;
  }

  /**
   * Generate master .env file for all services
   */
  static generateMasterEnv(): string {
    const lines: string[] = [];
    lines.push('# Generated by @modern-reservation/port-manager');
    lines.push('# Master environment configuration for all services');
    lines.push('# Run: ./dev.sh config-generate');
    lines.push('');

    // Group by category
    const categories = [
      ServiceCategory.GATEWAY,
      ServiceCategory.CONFIG,
      ServiceCategory.SERVICE_DISCOVERY,
      ServiceCategory.DATABASE,
      ServiceCategory.CACHE,
      ServiceCategory.MESSAGE_QUEUE,
      ServiceCategory.FRONTEND,
      ServiceCategory.NODE_SERVICE,
      ServiceCategory.JAVA_BUSINESS,
      ServiceCategory.MONITORING,
    ];

    categories.forEach((category) => {
      const services = PortRegistry.getServicesByCategory(category);
      if (services.length > 0) {
        lines.push(`# ${category}`);
        services.forEach((service) => {
          const envName = service.name.toUpperCase().replace(/-/g, '_');
          lines.push(`${envName}_PORT=${service.port}`);
          lines.push(`${envName}_HOST=${service.internal ? '127.0.0.1' : '0.0.0.0'}`);
        });
        lines.push('');
      }
    });

    return lines.join('\n');
  }

  /**
   * Generate application-ports.properties for Spring Boot
   */
  static generateSpringProperties(): string {
    const lines: string[] = [];
    lines.push('# Generated by @modern-reservation/port-manager');
    lines.push('# Spring Boot properties for port configuration');
    lines.push('');

    const services = PortRegistry.getAllServices();
    services.forEach((service) => {
      const propName = service.name.replace(/-/g, '.');
      lines.push(`# ${service.description}`);
      lines.push(`services.${propName}.port=${service.port}`);
      lines.push(`services.${propName}.host=${service.internal ? '127.0.0.1' : '0.0.0.0'}`);
      lines.push(`services.${propName}.url=${service.protocol}://${service.internal ? 'localhost' : '0.0.0.0'}:${service.port}`);
      lines.push('');
    });

    return lines.join('\n');
  }

  /**
   * Generate TypeScript constants file
   */
  static generateTypeScriptConfig(): string {
    const lines: string[] = [];
    lines.push('// Generated by @modern-reservation/port-manager');
    lines.push('// DO NOT EDIT MANUALLY - Run: ./dev.sh config-generate');
    lines.push('');
    lines.push('export const ServicePorts = {');

    const services = PortRegistry.getAllServices();
    services.forEach((service, index) => {
      const key = service.name
        .split('-')
        .map((part) => part.toUpperCase())
        .join('_');
      const comma = index < services.length - 1 ? ',' : '';
      lines.push(`  ${key}: ${service.port}${comma} // ${service.description}`);
    });

    lines.push('} as const;');
    lines.push('');
    lines.push('export const ServiceHosts = {');

    services.forEach((service, index) => {
      const key = service.name
        .split('-')
        .map((part) => part.toUpperCase())
        .join('_');
      const host = service.internal ? '127.0.0.1' : '0.0.0.0';
      const comma = index < services.length - 1 ? ',' : '';
      lines.push(`  ${key}: '${host}'${comma}`);
    });

    lines.push('} as const;');
    lines.push('');
    lines.push('export const ServiceUrls = {');

    services.forEach((service, index) => {
      const key = service.name
        .split('-')
        .map((part) => part.toUpperCase())
        .join('_');
      const host = service.internal ? 'localhost' : '0.0.0.0';
      const comma = index < services.length - 1 ? ',' : '';
      lines.push(`  ${key}: '${service.protocol}://${host}:${service.port}'${comma}`);
    });

    lines.push('} as const;');

    return lines.join('\n');
  }

  /**
   * Generate Java constants class
   */
  static generateJavaConfig(): string {
    const lines: string[] = [];
    lines.push('// Generated by @modern-reservation/port-manager');
    lines.push('// DO NOT EDIT MANUALLY - Run: ./dev.sh config-generate');
    lines.push('');
    lines.push('package com.modernreservation.config;');
    lines.push('');
    lines.push('public final class ServicePorts {');
    lines.push('    private ServicePorts() {}');
    lines.push('');

    const services = PortRegistry.getAllServices();
    services.forEach((service) => {
      const constantName = service.name
        .split('-')
        .map((part) => part.toUpperCase())
        .join('_');
      lines.push(`    /** ${service.description} */`);
      lines.push(`    public static final int ${constantName} = ${service.port};`);
      lines.push('');
    });

    lines.push('}');

    return lines.join('\n');
  }

  /**
   * Generate Kubernetes ConfigMap
   */
  static generateK8sConfigMap(): string {
    const lines: string[] = [];
    lines.push('# Generated by @modern-reservation/port-manager');
    lines.push('apiVersion: v1');
    lines.push('kind: ConfigMap');
    lines.push('metadata:');
    lines.push('  name: service-ports');
    lines.push('  namespace: modern-reservation');
    lines.push('data:');

    const services = PortRegistry.getAllServices();
    services.forEach((service) => {
      const key = service.name.toUpperCase().replace(/-/g, '_');
      lines.push(`  ${key}_PORT: "${service.port}"`);
      lines.push(`  ${key}_HOST: "${service.internal ? '127.0.0.1' : '0.0.0.0'}"`);
    });

    return lines.join('\n');
  }
}
