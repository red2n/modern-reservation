# Analytics Engine Service Configuration

# Server Configuration
server:
  port: 8086
  servlet:
    context-path: /analytics-engine

# Spring Application Configuration
spring:
  application:
    name: analytics-engine
  config:
    import: "optional:configserver:http://localhost:8888"
  profiles:
    active: development

  # Database Configuration
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/modern_reservation_dev}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: false
    generate-ddl: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: false
          use_query_cache: false

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 3
      timeout: 2s
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 5s

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
    consumer:
      group-id: analytics-engine-tenant-consumer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 10
      properties:
        spring.json.trusted.packages: com.modernreservation.tenant.commons.events

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    health-check-url-path: /analytics-engine/actuator/health

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    metrics:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}

# OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    config-url: /analytics-engine/api-docs/swagger-config
    url: /analytics-engine/api-docs
    enabled: true
    operationsSorter: method
    disable-swagger-default-url: true
  show-actuator: true
  group-configs:
    - group: analytics
      display-name: Analytics Engine API
      paths-to-match: /analytics-engine/api/**

# Custom Analytics Configuration
analytics:
  calculation:
    batch-size: 1000
    timeout-seconds: 300
    thread-pool-size: 10
    max-queue-size: 5000

  forecasting:
    enabled: true
    default-periods: 30
    confidence-level: 0.95
    max-forecast-periods: 365

  caching:
    dashboard-ttl: 300 # 5 minutes
    metrics-ttl: 600   # 10 minutes
    reports-ttl: 3600  # 1 hour
    forecasts-ttl: 1800 # 30 minutes

  reporting:
    max-concurrent-reports: 5
    report-retention-days: 90
    export-formats: PDF,EXCEL,CSV,JSON

  data-quality:
    min-confidence-score: 0.7
    quality-check-enabled: true
    outlier-detection-enabled: true

# Logging Configuration
logging:
  level:
    com.modernreservation.analyticsengine: INFO
    org.springframework.kafka: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    io.micrometer: INFO
    zipkin2: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{50} - %msg%n"
  file:
    name: ../../logs/business-services/analytics-engine.log
    max-size: 100MB
    max-history: 30

# Application Info
info:
  app:
    name: Modern Reservation Analytics Engine
    description: Advanced analytics and business intelligence service
    version: 3.2.0
    encoding: UTF-8
    java:
      version: 21
