server:
  port: 8085
  servlet:
    context-path: /rate-management

spring:
  application:
    name: rate-management

  datasource:
    url: jdbc:postgresql://localhost:5432/modern_reservation
    username: reservation_user
    password: reservation_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 8
          min-idle: 2

  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

# Custom application properties
rate-management:
  pricing:
    default-currency: USD
    max-rate-adjustment: 5.0 # Maximum rate adjustment percentage
    dynamic-pricing-enabled: true
    seasonal-adjustment-enabled: true
    competitive-pricing-enabled: true

  cache:
    rate-search-ttl: 300 # 5 minutes
    best-rates-ttl: 180 # 3 minutes
    rate-statistics-ttl: 600 # 10 minutes

  scheduling:
    rate-expiry-check: "0 0 2 * * ?" # Daily at 2 AM
    price-optimization: "0 0 */4 * * ?" # Every 4 hours

logging:
  level:
    com.modernreservation.ratemanagement: INFO
    org.springframework.data.jpa: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/rate-management.log
    max-size: 10MB
    max-history: 30
