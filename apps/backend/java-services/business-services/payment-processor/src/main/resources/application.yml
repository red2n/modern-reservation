# Payment Processor Service Configuration
# Modern Reservation System
# Version: 3.2.0

# Application Configuration
spring:
  application:
    name: payment-processor-service

  # Profile Configuration
  profiles:
    active: development

  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/modern_reservation_payments
    username: ${DB_USERNAME:modern_reservation}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      auto-commit: false

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.SnakeCasePhysicalNamingStrategy
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        connection:
          provider_disables_autocommit: true
    open-in-view: false

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 2
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: payment-processor-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: com.modernreservation.paymentprocessor.dto
    listener:
      ack-mode: manual_immediate

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth/realms/modern-reservation}

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: PT1H
      cache-null-values: false
      use-key-prefix: true
      key-prefix: payment-processor

# Server Configuration
server:
  port: ${SERVER_PORT:8084}
  servlet:
    context-path: /payment-processor
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 5
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
    metadata-map:
      zone: ${EUREKA_ZONE:zone1}
      profile: ${spring.profiles.active}
      version: ${spring.application.version:3.2.0}

# Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,beans,payment-stats
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      service: payment-processor
      environment: ${spring.profiles.active}
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}
  health:
    redis:
      enabled: true
    db:
      enabled: true
    kafka:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

# Logging Configuration
logging:
  level:
    com.modernreservation.paymentprocessor: INFO
    org.springframework.kafka: WARN
    org.springframework.data.redis: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/payment-processor.log
    max-size: 10MB
    max-history: 30

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: alpha
    tags-sorter: alpha
  info:
    title: Payment Processor Service API
    description: Payment processing and management microservice for Modern Reservation System
    version: 3.2.0
    contact:
      name: Modern Reservation System Team
      email: team@modernreservation.com
    license:
      name: MIT
      url: https://opensource.org/licenses/MIT

# Payment Processor Specific Configuration
payment-processor:
  # Gateway Configuration
  gateways:
    stripe:
      public-key: ${STRIPE_PUBLIC_KEY:pk_test_}
      secret-key: ${STRIPE_SECRET_KEY:sk_test_}
      webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_}
      enabled: true
    paypal:
      client-id: ${PAYPAL_CLIENT_ID:}
      client-secret: ${PAYPAL_CLIENT_SECRET:}
      sandbox: ${PAYPAL_SANDBOX:true}
      enabled: false

  # Security Configuration
  security:
    pci-compliance:
      enabled: true
      log-sensitive-data: false
    fraud-detection:
      enabled: true
      risk-threshold: 70.0
      block-high-risk: false
    encryption:
      algorithm: AES-256-GCM
      key-rotation-days: 90

  # Processing Configuration
  processing:
    auto-capture:
      enabled: false
      delay-minutes: 0
    auto-settlement:
      enabled: true
      delay-hours: 24
    timeout:
      authorization-minutes: 30
      capture-minutes: 60
      settlement-hours: 72

  # Refund Configuration
  refunds:
    auto-approve-threshold: 100.00
    require-manager-approval: true
    notification:
      customer: true
      merchant: true

  # Rate Limiting
  rate-limiting:
    enabled: true
    requests-per-minute: 100
    burst-capacity: 50

  # Webhook Configuration
  webhooks:
    enabled: true
    retry-attempts: 3
    retry-delay-seconds: 5
    timeout-seconds: 30

  # Batch Processing
  batch:
    expired-payments:
      enabled: true
      cron: "0 */15 * * * *" # Every 15 minutes
    settlement:
      enabled: true
      cron: "0 0 2 * * *" # Daily at 2 AM
    reconciliation:
      enabled: true
      cron: "0 0 4 * * *" # Daily at 4 AM

  # Notification Configuration
  notifications:
    email:
      enabled: true
      templates:
        payment-confirmed: payment-confirmation
        payment-failed: payment-failure
        refund-processed: refund-confirmation
    sms:
      enabled: false
    push:
      enabled: true

# Resilience Configuration
resilience4j:
  circuitbreaker:
    instances:
      payment-gateway:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
  retry:
    instances:
      payment-gateway:
        max-attempts: 3
        wait-duration: 1s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
  ratelimiter:
    instances:
      payment-api:
        limit-for-period: 100
        limit-refresh-period: 60s
        timeout-duration: 5s

# Feature Flags
features:
  payment-methods:
    credit-card: true
    debit-card: true
    paypal: false
    apple-pay: true
    google-pay: true
    bank-transfer: false
    cryptocurrency: false
    bnpl: false
    gift-card: true
    loyalty-points: true
    cash: true
  fraud-detection:
    machine-learning: false
    rule-based: true
    third-party: false
  analytics:
    real-time: true
    reporting: true
    export: true
