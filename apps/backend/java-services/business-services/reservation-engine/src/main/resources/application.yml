server:
  port: 8081
  address: 127.0.0.1  # Bind only to localhost - not accessible externally
  servlet:
    context-path: /reservation-engine

spring:
  application:
    name: reservation-engine
  config:
    import:
      - "configserver:${CONFIG_SERVER_URL:http://localhost:8888}"
      - "optional:configserver:${CONFIG_SERVER_URL:http://localhost:8888}/business-services-common.yml"
  cloud:
    config:
      username: ${CONFIG_SERVER_USERNAME:config-admin}
      password: ${CONFIG_SERVER_PASSWORD:#{null}}
      fail-fast: false
  profiles:
    active: dev
  # Database Configuration (using Docker PostgreSQL)
  # CRITICAL: Set DB_PASSWORD as environment variable in production
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/modern_reservation_dev}
    username: ${DB_USERNAME:reservation_user}
    password: ${DB_PASSWORD:#{null}}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 30000
      leak-detection-threshold: 60000
      pool-name: ReservationEngineHikariPool
      connection-test-query: SELECT 1
      validation-timeout: 5000
      register-mbeans: true
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        default_schema: public

# Redis Configuration
  redis:
    host: localhost
    port: 6379
    timeout: 3000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 2

# Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: reservation-engine
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.modernreservation.*"

# Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      availabilityService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        slowCallRateThreshold: 100
        slowCallDurationThreshold: 3s
      paymentService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 3
        permittedNumberOfCallsInHalfOpenState: 2
        waitDurationInOpenState: 15s
        failureRateThreshold: 30
        slowCallRateThreshold: 100
        slowCallDurationThreshold: 5s
      rateService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        slowCallRateThreshold: 100
        slowCallDurationThreshold: 2s
  retry:
    instances:
      availabilityService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.ResourceAccessException
          - java.net.ConnectException
      paymentService:
        maxAttempts: 2
        waitDuration: 2s
        enableExponentialBackoff: false
      rateService:
        maxAttempts: 3
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  timelimiter:
    instances:
      availabilityService:
        timeoutDuration: 3s
      paymentService:
        timeoutDuration: 5s
      rateService:
        timeoutDuration: 2s

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    config-url: /reservation-engine/api-docs/swagger-config
    url: /reservation-engine/api-docs
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: Reservation Engine API
    description: Core reservation management service
    version: 2.0.0
    contact:
      name: Modern Reservation Team

# Eureka Configuration for localhost binding
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: localhost
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port}
    home-page-url: http://localhost:${server.port}/
    status-page-url: http://localhost:${server.port}/actuator/info
    health-check-url: http://localhost:${server.port}/actuator/health

# External Service URLs (will be resolved via Eureka)
services:
  availability-calculator: http://availability-calculator
  payment-processor: http://payment-processor
  rate-management: http://rate-management

# Business Configuration
reservation:
  default-timeout-minutes: 15
  max-advance-booking-days: 365
  cancellation-cutoff-hours: 24
  overbooking-threshold: 0.05

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,caches
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: http://localhost:9411/api/v2/spans

# Logging Configuration
logging:
  level:
    com.modernreservation: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId:-},%X{spanId:-}] [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId:-},%X{spanId:-}] [%thread] %-5level [%logger{36}] - %msg%n"
  file:
    name: ../../logs/business-services/reservation-engine.log

# Application Information
info:
  app:
    name: Modern Reservation Engine
    description: Core reservation management and booking service
    version: 2.0.0
    features:
      - reservation-crud
      - availability-integration
      - payment-integration
      - event-driven-architecture
      - caching
